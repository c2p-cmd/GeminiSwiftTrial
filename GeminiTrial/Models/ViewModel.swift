//
//  ViewModel.swift
//  GeminiTrial
//
//  Created by Sharan Thakur on 15/12/23.
//

import ExyteChat
import GoogleGenerativeAI
import Observation
import SwiftUI

/// `ViewModel` class that manages the interaction with generative models for text and image content creation.
///
/// This class maintains instances of `GenerativeModel` for text and image generation and facilitates communication between the UI and these models.
@Observable
class ViewModel {
    private let model: GenerativeModel, imageModel: GenerativeModel
    private let chat: Chat
    
    /// An array of `Message` objects representing the chat history.
    private(set) var messages: [Message]
    
    /// Initializes the ViewModel with specific models for text and image generation.
    init() {
        self.model = GenerativeModel(name: "gemini-pro", apiKey: APIKey.stored)
        self.imageModel = GenerativeModel(name: "gemini-pro-vision", apiKey: APIKey.stored)
        self.chat = model.startChat()
        self.messages = [
            Message(id: UUID().uuidString, user: User.botUser, text: "Hey! I am Gemini. Google's **LLM** [learn more.](https://deepmind.google/technologies/gemini/)")
        ]
    }
    
    /// Generates text based on the input `DraftMessage`.
    /// If the draft message contains an image, it uses `imageModel` for content generation, otherwise, it uses `chat`.
    /// - Parameter draftMessage: The `DraftMessage` object containing text and optional media.
    /// - Returns: The generated text as a `Message`.
    /// - Throws: `AppError.noResponse` if no text is generated.
    func generateText(
        from draftMessage: DraftMessage
    ) async throws -> Message {
        let response: GenerateContentResponse
        
        let imageArray = draftMessage.medias.first(where: { $0.type == .image })
        
        if let imageData = await imageArray?.getData(), let image = UIImage(data: imageData) {
            response = try await self.imageModel.generateContent(draftMessage.text, image)
        } else {
            response = try await chat.sendMessage(draftMessage.text)
        }
        
        guard let text = response.text else {
            throw AppError.noResponse
        }
        
        return Message(
            id: UUID().uuidString,
            user: .botUser,
            text: text
        )
    }
    
    /// Asynchronously generates a stream of text responses for the given input string.
    /// - Parameters:
    ///   - text: The input text string.
    ///   - newString: A closure that is called with new strings generated by the model.
    /// - Throws: Errors that may occur during message streaming.
    func generateTextStream(
        from text: String,
        newString: (String) -> Void
    ) async throws {
        let response = self.chat.sendMessageStream(text)
        
        for try await chunk in response {
            if let text = chunk.text {
                newString(text)
            }
        }
    }
    
    /// Appends a new message to the chat history.
    /// - Parameter message: The `Message` object to append to the chat history.
    func append(message: Message) {
        self.messages.append(message)
    }
    
    /// Retrieves the last message from the bot user in the chat history.
    /// - Returns: The text of the last bot message, if available.
    func lastBotMessage() -> String? {
        messages.last { $0.user == .botUser }?.text
    }
}

/// Extension to provide easy access to the shared `ViewModel` instance in SwiftUI's environment.
///
/// This extension adds a `viewModel` property to `EnvironmentValues`, allowing SwiftUI views to easily access and interact with the shared `ViewModel`.
extension EnvironmentValues {
    var viewModel: ViewModel {
        get { self[ViewModelKey.self] }
        set { self[ViewModelKey.self] = newValue }
    }
}

/// `ViewModelKey` serves as an environment key for accessing the `ViewModel` instance.
///
/// Conforms to `EnvironmentKey` and provides a default `ViewModel` instance, which can be accessed and modified via SwiftUI's environment mechanism.
struct ViewModelKey: EnvironmentKey {
    static var defaultValue: ViewModel {
        ViewModel()
    }
}
